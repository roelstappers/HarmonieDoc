#!/bin/bash
#-----------------------------------------------------
#   Run shuffle-merge on an ECMA ODB sub-base set.
#   The result will be a new ECMA ODB virtual base. 
#-----------------------------------------------------
#   The input directory structure: 
#     ${d_DBMERGE}/ECMA.${base1}/....
#            /ECMA.${base2}/....
#             ...
#   and inside one ECMA.${base}: -|->ECMA.dd
#                                 |->ECMA.sch
#                                 |->ECMA.flags
#                                 |->1
#                                 ....
#
#   The virtual basis (with the associated files) : 
#     ${d_DBMERGE}/ECMA->|->ECMA.dd
#                   |->ECMA.sch
#                   |->ECMA.poolmask
#                   |->IOASSIGN
#-----------------------------------------------------                 
#   Globals: n_date, hh, left_margin, right_margin, 
#            types_BASE, d_ASSIM , PROC_SHUF, 
#            PROC_MERGE_IOASSIGN, NPROC, d_DBMERGE
#------------------------------------------------------


. functions.ksh

typeset step
while getopts d:t:s: opt; do
  case $opt in
     t)      types_BASE=$OPTARG  ;;
     d)      d_DBMERGE=$OPTARG  ;;
     s)      nbslot=$OPTARG ;; 
  esac
done

if [ "$nbslot" -lt "1" -o "$nbslot" -gt "13" ]; then
  echo "Invalid number of time slots: $nbslot"
fi

echo "ODB dir: ${d_DBMERGE}"
typeset base
	
#---  ODB settings for merge/shuffle
export ODB_CMA=ECMA
export ODB_SRCPATH_ECMA=${d_DBMERGE}/ECMA
export ODB_DATAPATH_ECMA=${d_DBMERGE}/ECMA
ANASURF_MODE_SMS=`echo $SMSPARENT`
if [ "$ANAATMO" == "4DVAR" -a "$ANASURF_MODE_SMS" == "AnSFC" -a "$ANASURF_MODE" != "after" ]; then
  # When we do AnSFC before 4D-VAR we need a shifted date/time
  dat=${YMD}${HH}
  start_4dv=$(( $FCINT / 2 ))
  dat=`mandtg ${dat} + -$start_4dv`
  export ODB_ANALYSIS_DATE=`echo $dat | cut -c1-8`
  export ODB_ANALYSIS_TIME=`echo $dat | cut -c9-10`0000
  BASETIME=$dat
else
  export ODB_ANALYSIS_DATE=${YMD}
  export ODB_ANALYSIS_TIME=${HH}0000
  BASETIME=${YMD}${HH}
fi
export IOASSIGN=${d_DBMERGE}/ECMA/IOASSIGN
export ODB_ECMA_POOLMASK_FILE=${d_DBMERGE}/ECMA/ECMA.poolmask

#--- prepare db dir
RecreateDir ${d_DBMERGE}/ECMA
 
#-- create merged ioassign file
cd ${d_DBMERGE}/ECMA
liste=""
for base in ${types_BASE}; do
  liste=${liste}" -t "${base}
done
echo "list is $liste"

$HM_LIB/scr/merge_ioassign -d ${d_DBMERGE} ${liste} || \
	{ echo "MERGE_IOASSIGN failed" ; exit 1 ; }
unset liste

#-- get number of pools
na=`head -5 ${d_DBMERGE}/ECMA/ECMA.dd | tail -1`
nb=1
echo "Original: na=$na, nb=$nb"

$MPPEXEC $BINDIR/shuffle -iECMA -oECMA -a${na} \
		-b${nb} -B${BASETIME} -L${SHUFFLE_LMARGIN} \
		-R${SHUFFLE_RMARGIN} -T${nbslot} || exit
	
unset ODB_ECMA_POOLMASK_FILE
